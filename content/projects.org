#+TITLE: Projects
#+date: 2024-10-23T19:24:06-0400
#+summary: A list of my current projects


{{< details class="fold" summary="ðŸª¶ Background Information" >}}
Welcome to my collection of open-source projects. Beware, most if not all of
these projects are unsuitable for production use. If you want help getting
started with one of them, please [[/contact][send me an email]].
{{< /details >}}

* conductor
** Description
A Haskell music organizer with a metadata composition language

Something like this will produce a [[https://en.wikipedia.org/wiki/M3U][m3u playlist file]] with the tracks that are obtained with the conditions provided:
#+begin_src haskell
  songs <- filter(artist == "Nujabes") -- 1. adds Nujabes songs to set
        || filter(genre == "Hip Hop")  -- 2. adds Hip Hop songs to set
        && limit(year > 1990)          -- 3. limit the set to songs made after 199   0

  otherSongs <- filter(artist == "Aphex Twin") -- 1. Get all songs by  aphex twin
             && limit(count == 100)            -- limit number of tracks in playli   st

  result <- write $ union(songs, otherSongs) -- merges the sets together
#+end_src

I finally decided to make use of the knowledge from watching [[https://www.youtube.com/watch?v=N9RUqGYuGfw][Tsoding's JSON Parser video]]. I implemented parsers using the excellent ~parsec~ library. I think that this project made haskell's real strengths shine when it comes to parsing and writing languages. Although my project is not as complicated as general purpose languages, it goes to show how convenient combinatory parsing is for developers.

** Reflection

* gtfo
** Description
This program is designed to organize files based on type written in Haskell.

The sorting will work by creating folders for files based their kind (Document, Music, Video, Image, etcâ€¦).

Going from this:

#+begin_src sh
  /home/user
   â”œâ”€â”€ document-1.pdf
   â”œâ”€â”€ document-2.pdf
   â”œâ”€â”€ document-3.pdf
   â”œâ”€â”€ song3.mp3
   â”œâ”€â”€ pic-1.jpg
   â”œâ”€â”€ pic-2.jpg
   â”œâ”€â”€ video-2.mp4
   â”œâ”€â”€ pic-3.jpg
   â”œâ”€â”€ pic-4.jpg
   â”œâ”€â”€ document-4.pdf
   â”œâ”€â”€ song1.mp3
   â”œâ”€â”€ song2.mp3
   â”œâ”€â”€ video-1.mp4
   â”œâ”€â”€ video-3.mp4
   â””â”€â”€ video-4.mp4

#+end_src

To this:

#+begin_src sh
  /home/user
   â”œâ”€â”€ Documents
   â”‚   â”œâ”€â”€ document-1.pdf
   â”‚   â”œâ”€â”€ document-2.pdf
   â”‚   â”œâ”€â”€ document-3.pdf
   â”‚   â””â”€â”€ document-4.pdf
   â”œâ”€â”€ Pictures
   â”‚   â”œâ”€â”€ pic-1.jpg
   â”‚   â”œâ”€â”€ pic-2.jpg
   â”‚   â”œâ”€â”€ pic-3.jpg
   â”‚   â””â”€â”€ pic-4.jpg
   â”œâ”€â”€ Music
   â”‚   â”œâ”€â”€ song1.mp3
   â”‚   â”œâ”€â”€ song2.mp3
   â”‚   â””â”€â”€ song3.mp3
   â””â”€â”€ Videos
       â”œâ”€â”€ video-1.mp4
       â”œâ”€â”€ video-2.mp4
       â”œâ”€â”€ video-3.mp4
       â””â”€â”€ video-4.mp4
#+end_src

** Reflection
This was my first /"serious"/ project that I wrote in Haskell. This went beyond the experience I had come by through doing advent of code in previous years. Wrestling with the build system and external dependencies was not the same struggle as it has been the last couple of years. File system work is pretty complicated in Haskell compared to other languages, but the typing is what made this project really fun to design.

* cd-maker
** Description
A program to generate a file system for a cd using m3u playlists and mp3s. It is written in Common Lisp. 

I was going to make this into a script, but is evolving to be a bit more than that, so it is getting its own repo.

The directory structure will look like this:

#+begin_src sh
  Music
  â””â”€â”€ Disk01
      â”œâ”€â”€ 00-Playlists
      â”‚   â”œâ”€â”€ playlist1.m3u
      â”‚   â”œâ”€â”€ playlist2.m3u
      â”‚   â”œâ”€â”€ playlist3.m3u
      â”‚   â””â”€â”€ playlist4.m3u
      â”œâ”€â”€ 01-Album name
      â”‚   â”œâ”€â”€ cover.jpg
      â”‚   â”œâ”€â”€ song1.mp3
      â”‚   â”œâ”€â”€ song2.mp3
      â”‚   â””â”€â”€ song3.mp3
      â”œâ”€â”€ 02-Album name
      â”‚   â”œâ”€â”€ cover.jpg
      â”‚   â”œâ”€â”€ song1.mp3
      â”‚   â”œâ”€â”€ song2.mp3
      â”‚   â””â”€â”€ song3.mp3
      â””â”€â”€ 03-Album name
          â”œâ”€â”€ cover.jpg
          â”œâ”€â”€ song1.mp3
          â”œâ”€â”€ song2.mp3
          â””â”€â”€ song3.mp3
#+end_src


The playlists will be structured like this:
#+begin_src sh
  "/home/user/Music/Disk01/01-Album\ name/song2.mp3"
  "/home/user/Music/Disk01/03-Album\ name/song3.mp3"
  "/home/user/Music/Disk01/02-Album\ name/song1.mp3"
  ...
#+end_src

Then you can pop the playlist into a CD player and play the playlist.

** Reflection

* robozo - Vex Robotics Code for 2023-2024 Season
** Description
** Reflection

* vex-high-steaks - Vex Robotics Code for 2023-2024 Season
** Description
** Reflection

* Minor projects

** denote wiki

** Emacs Configuration

** dotfiles and nixos config

** Gruber darker theme fork
I forked tsoding's gruber darker theme because it was missing some colors in places that I wanted to have from other themes. I didn't make many modifications, but I learned a lot about how Emacs configures color themes. I analyzed other themes like the awesome [[https://github.com/protesilaos/modus-themes][modus-themes]].
